$smallScreen: 550px;
$mediumScreen: 1024px;
$largeScreen: 1600px;

$largePadding: calc(4vw + 2rem);
$mediumPadding: calc(2vw + 1.5rem);
$smallPadding: calc(1% + 1rem);

$transitionDurationForDebugging: .5s;


//
// responsive min max
//
@function between( $fromValue, $toValue, $fromWidth, $toWidth ) {
  $slope: ( $toValue - $fromValue ) / ( $toWidth - $fromWidth );
  $base: $fromValue - $slope * $fromWidth;

  @return calc(#{$base} + #{100vw * $slope});
}

@mixin responsive-property(
  $property,
  $fromValue,
  $toValue,
  $fromBp: $smallScreen,
  $toBp: $largeScreen
) {

  $fromValues: ();
  $betweenValues: ();
  $toValues: ();

  @for $i from 1 through length( $fromValue ) {
    $fv: nth( $fromValue, $i );
    $tv: nth( $toValue, $i );

    $bv: $fv;
    $bvf: false;
    $bvt: false;

    @if ( type-of( $fv ) == "number" and not unitless( $fv ) and unit( $fv ) != "%" ) {
      $fv: if( unit( $fv ) != "px", ( $fv / ( $fv * 0 + 1 ) * 16 ) * 1px, $fv );
        $bvf: $fv;
    }
    @if ( type-of( $tv ) == "number" and not unitless( $tv ) and unit( $tv ) != "%" ) {
      $tv: if( unit( $tv ) != "px", ( $tv / ( $tv * 0 + 1 ) * 16 ) * 1px, $tv );
      $bvt: $tv;
    }
    @if ( $bvf != false and $bvt != false ) {
      $bv: between( $bvf, $bvt, $fromBp, $toBp );
    }

    $fromValues: append( $fromValues, $fv );
    $betweenValues: append( $betweenValues, $bv );
    $toValues: append( $toValues, $tv );
  }

  #{$property}: $fromValues;
  @media screen and (min-width: #{$fromBp}) {
    #{$property}: $betweenValues;
  }
  @media screen and (min-width: #{$toBp}) {
    #{$property}: $toValues;
  }
}



//
// Colors
//
@function color($color-name, $color-variant:null) {
  @if ($color-variant !=null) {
     @return map-get(map-get($colors, $color-name), $color-variant);
  }
  @else {
     @return map-get($colors, $color-name);
  }
}

$colors: (
  highlight: #00d8ff,
  light: #d2f8ff,
  mid: #70bfce,
  dark: #2d6b77,
  darker: #1a4850,
  background: #0b151d
);



//
// Squircles
//
@mixin squircleMask($size) {
  mask-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" height="100%25" width="100%25"><mask id="squircle"><rect fill="white" width="100%25" height="100%25"/><svg x="-.01%25" style="overflow: visible"><path fill="black" width="' + $size + '" height="' + $size + '" d="M' + $size + ' 0H0v' + $size + 'C0 ' + $size * .2 + ' ' + $size * .2 + ' 0 ' + $size + ' 0z"/></svg><svg x="100.01%25" style="overflow: visible"><path fill="black" d="M' + $size + ' ' + $size + 'V0H0c' + $size * .8 + ' 0 ' + $size + ' ' + $size * .2 + ' ' + $size + ' ' + $size + 'z" transform="translate(-' + $size + ',0)"/></svg><svg x="100.01%25" y="100.01%25" style="overflow: visible"><path fill="black" d="M0 ' + $size + 'h' + $size + 'V0c0 ' + $size * .8 + '-' + $size * .2 + ' ' + $size + '-' + $size + ' ' + $size + 'z" transform="translate(-' + $size + ',-' + $size + ')"/></svg><svg x="-.01%25" y="100.01%25" style="overflow: visible"><path fill="black" d="M0 0v' + $size + 'h' + $size + 'C' + $size * .2 + ' ' + $size + ' 0 ' + $size * .8 + ' 0 0z" transform="translate(0,-' + $size + ')"/></svg></mask><rect fill="white" width="100%25" height="100%25" mask="url(%23squircle)"/></svg>')
}

@mixin squircle($minRadius) {
  $midRadius: $minRadius * 1.2;
  $maxRadius: $midRadius * 1.2;
  
  @include squircleMask($minRadius);
  min-height: calc(#{$minRadius} * 2px);
  
  @media (min-width: $mediumScreen) {
    @include squircleMask($midRadius);
    min-height: calc(#{$midRadius} * 2px);
  }
  
  @media (min-width: $largeScreen) {
    @include squircleMask($maxRadius);
    min-height: calc(#{$maxRadius} * 2px);
  }
}

@function encodeColor($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + encodeColor(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin squircleBackground($size,$color) {
  background: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" height="100%25" width="100%25"><mask id="squircle"><rect fill="white" width="100%25" height="100%25"/><svg x="-.01%25" style="overflow: visible"><path fill="black" width="' + $size + '" height="' + $size + '" d="M' + $size + ' 0H0v' + $size + 'C0 ' + $size * .2 + ' ' + $size * .2 + ' 0 ' + $size + ' 0z"/></svg><svg x="100.01%25" style="overflow: visible"><path fill="black" d="M' + $size + ' ' + $size + 'V0H0c' + $size * .8 + ' 0 ' + $size + ' ' + $size * .2 + ' ' + $size + ' ' + $size + 'z" transform="translate(-' + $size + ',0)"/></svg><svg x="100.01%25" y="100.01%25" style="overflow: visible"><path fill="black" d="M0 ' + $size + 'h' + $size + 'V0c0 ' + $size * .8 + '-' + $size * .2 + ' ' + $size + '-' + $size + ' ' + $size + 'z" transform="translate(-' + $size + ',-' + $size + ')"/></svg><svg x="-.01%25" y="100.01%25" style="overflow: visible"><path fill="black" d="M0 0v' + $size + 'h' + $size + 'C' + $size * .2 + ' ' + $size + ' 0 ' + $size * .8 + ' 0 0z" transform="translate(0,-' + $size + ')"/></svg></mask><rect fill="' + encodeColor(#{$color},"#","%23") + '" width="100%25" height="100%25" mask="url(%23squircle)"/></svg>');
}



:root {
  --scrollbar: 0px;
  --calculatedFooterHeight: 0px;
  --innerVW: 100vw;
  --innerVH: 100vh;
}


$fullWidth: var(--innerVW);
$navHeight: 3rem;
$mainPadding: calc(3rem + 1vw);
$smallPadding: calc(1rem + 1vw);
$headerHeight: 3rem;
$transition: .6s;



@mixin full-width {
  width: 100vw;
  width: $fullWidth;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: calc(#{$fullWidth} * -.5);
  margin-right: calc(#{$fullWidth} * -.5);
}

.full-width {
  @include full-width;
}



@function colWidth($columns, $gutterSize: $smallPadding, $span: 1) {
  $columnWidth: calc((100% - (#{$gutterSize} * (#{$columns} + 1))) / #{$columns});
  $span: $span - 1;

  @return calc(#{$columnWidth} + (#{$columnWidth} * #{$span}) + (#{$gutterSize} * #{$span}));
}

@mixin set-grid($gridColumns, $gridGutterSize: calc(1rem + 1vw)) {
  margin-top: calc(#{$gridGutterSize} * -1);
  
  .masonry-item {
    width: colWidth($gridColumns,$gridGutterSize);
    margin-left: $gridGutterSize;
    margin-top: $gridGutterSize;
  }
}

.masonry {
  @include set-grid(4);
  
  @media screen and (max-width: 1400px) {
    @include set-grid(3);
  }
  
  @media screen and (max-width: $mediumScreen) {
    @include set-grid(2);
  }
  
  @media screen and (max-width: 650px) {
    @include set-grid(1);
  }
}

.masonry-item {
  display: flex;

  > * {
    flex: 1;
  }
}


@mixin pageNavigationColors(
  $backgroundColor: red,
  $textColor: white,
  $accentBright: cyan,
  $accentDark: blue
) {
  &:before {
    background-color: $backgroundColor;
  }

  #back,
  .nav--small-name span:first-of-type a {
    color: $textColor
  }

  .nav--small-name span:first-of-type:before {
    background-color: rgba($accentDark,.3);
  }

  #icon--back {
    fill: $accentBright
  }

  .nav--small-name span:nth-child(2) a {
    color: $accentBright
  }

  .transition--character-enter,
  .route-characters--leave-active {
    color: $accentDark;
    text-shadow: 0 0 1.5rem $accentDark;
  }
}

@mixin portfolioProjectColors(
  $backgroundColor: red,
  $textColor: white,
  $accentBright: cyan,
  $accentDark: blue
) {
  background-color: $backgroundColor;

  p,
  ul {
    color: $textColor;
  }

  h1 {
    span:first-of-type {
      color: $textColor;
    }
    span:first-of-type:before {
      background-color: rgba($accentDark,.3);
    }
    span:not(:first-of-type) {
      color: $accentBright;
    }
  }

  h2, h3, h4 {
    color: $accentBright;
  }

  h3:after {
    background: linear-gradient(to right, rgba($accentBright,0), $accentBright .2em, $accentDark, rgba($accentDark,0));
  }

  p a {
    border-bottom-color: $accentDark
  }

  .project-highlights {
    color: $accentDark;

    span {
      color: $textColor;
    }
    
  }

  ul li::before {
    color: red;
  }

  p,
  ::v-deep .project-highlights {
    text-shadow: 1px 1px 5px $backgroundColor;
  }
}