// main: styles.less

.opacity (@opacity) {
    opacity: @opacity;
}

.radius (@radius:10px) {
    border-radius: @radius;/* future proofing */
}

.transition(@target: all, @duration: .85s, @ease: cubic-bezier(0.19, 0.02, 0, 0.99)) {
    transition: @target @duration @ease;
}




// remove dev overlay from splash page
// can delete on launch
body.splash {

    &:after {display:none}
}


// Breakpoints
// Source: http://blog.scur.pl/2012/06/variable-media-queries-less-css/
@highdensity: ~"only screen and (-webkit-min-device-pixel-ratio: 1.5)",
              ~"only screen and (min--moz-device-pixel-ratio: 1.5)",
              ~"only screen and (-o-min-device-pixel-ratio: 3/2)",
              ~"only screen and (min-device-pixel-ratio: 1.5)";
@phone:       ~"only screen and (max-width: 529px)";
  @notPhone:  ~"only screen and (min-width: 530px)"; // Everything bigger than phones
@tablet:      ~"only screen and (min-width: 530px) and (max-width: 768px)";
@mobile:      ~"only screen and (max-width: 768px)"; // Phones and Tablets
  @notMobile: ~"only screen and (min-width: 769px)"; // Everything bigger than phone and tablet
@desktop:     ~"only screen and (min-width: 769px) and (max-width: 1128px)";
@desktop-xl:  ~"only screen and (min-width: 1129px)";




@gridColumns: 12;
@gridGutterWidth: 1rem;
@gridColumnWidth: @gridColumns - 1;
#grid {
    text-align: justify!important;
    text-justify: distribute-all-lines;
    font-size: 0!important;
    &:after {
        content: '';
        display: inline-block;
        width: 100%;
    }
    & > * {
        text-align: left;
        font-size: medium;
    }
    .cell() {
        vertical-align: top;
        display: inline-block;
        width: 100%;
        box-sizing: border-box;
    }
    .span(@cols, @total: @gridColumns) {
        @gutterCalc: @total / @cols;
        @totalGutter: (@gutterCalc - 1) * @gridGutterWidth;
        width: calc( ~"(100% - @{totalGutter}) / @{gutterCalc}" );
        margin-bottom: @gridGutterWidth;
    }
    .push(@cols, @total: @gridColumns) {
        //eft: percentage((@gridColumnWidth + @gridGutterWidth) * @cols /
                        //(@gridColumnWidth * @total + @gridGutterWidth * (@total - 1)));
        @gutterCalc: @total / @cols;
        @totalGutter: (@gutterCalc - 1) * @gridGutterWidth;
        left: calc( ~"(100% - @{totalGutter}) / @{gutterCalc} + @{gridGutterWidth}" );
    }
    .pull(@cols, @total: @gridColumns) {
        //left: percentage((@gridColumnWidth + @gridGutterWidth) * -@cols /
                        //(@gridColumnWidth * @total + @gridGutterWidth * (@total - 1)));
        @gutterCalc: @total / @cols;
        @totalGutter: (@gutterCalc - 1) * @gridGutterWidth;
        left: calc( ~"( (100% - @{totalGutter}) / @{gutterCalc} + @{gridGutterWidth} ) * -1" );
    }
}




// COLORS
@blue: #2ECEF1;
@whiteBlue: #e4faff;
@lightBlue: #adf1ff;
@baseBlue: #212b2e;
@darkBlue: #141f22;
@blackBlue: #0e1618;
